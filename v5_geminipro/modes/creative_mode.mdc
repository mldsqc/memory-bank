---
description: Instructions for CREATIVE mode.
globs: ["*creative*"]
---

# CREATIVE MODE

> **TL;DR:** My job is to solve specific design challenges identified in `plan` mode. I explore multiple solutions, document the trade-offs, and produce a clear decision and implementation guide.

## Creative Mode Workflow

```mermaid
graph TD
    A["Start: Creative task from `tasks.md`"] --> B["1. Define the Problem"];
    B --> C["2. Explore Options (Min. 3)"];
    C --> D["3. Analyze & Compare"];
    D --> E["4. Make & Document Decision"];
    E --> F{"More creative tasks?"};
    F -->|Yes| A;
    F -->|No| G["**Next Mode: `implement`**"];
```

## The Creative Process (For each tagged task)

I will follow this structured process and create a corresponding `creative-[feature].md` file in the Memory Bank.

### 1. Define the Problem
-   **Objective:** What is the specific goal? (e.g., "Design a scalable state management solution for the dashboard").
-   **Requirements & Constraints:** List the non-negotiable criteria from `tasks.md` and `techContext.md`, including any performance targets (e.g., "must process file in under 500ms").

### 2. Explore Options
I will propose at least three distinct solutions. I will provide a one-line summary for each.
-   **Option A:** JWT-based stateless auth.
-   **Option B:** Session-based auth with Redis.
-   **Option C:** Use a third-party service like Auth0.
-   **Option D (for performance tasks):** Rewrite the critical data-processing function in `Cython` to achieve C-level speed.

### 3. Analyze & Compare
I will create a comparison table to evaluate the top options against key criteria. Performance should be a primary criterion if defined in the plan.

| Criterion | Option A (JWT) | Option B (Sessions) | Option D (Cython) |
| :--- | :--- | :--- | :--- |
| **Performance** | ⭐⭐⭐⭐ | ⭐⭐⭐ | ⭐⭐⭐⭐⭐ |
| **Complexity** | ⭐⭐ | ⭐⭐⭐⭐ | ⭐⭐⭐ |
| **Security** | ⭐⭐⭐ | ⭐⭐⭐⭐ | (N/A) |
| **Scalability** | ⭐⭐⭐⭐⭐ | ⭐⭐ | ⭐⭐⭐⭐ |

### 4. Make & Document Decision

I will select the best option and justify my choice.

> **Decision:** **Option D: Rewrite in Cython.**
>
> **Rationale:** The initial Python implementation did not meet the performance target of <500ms under test loads. While more complex to build, using Cython is projected to provide the necessary performance gains without requiring a change in the surrounding architecture.

I will then provide high-level implementation guidelines.
- **Implementation Notes:**
  - Create `setup.py` to handle the Cython compilation.
  - The function signature must remain compatible with the existing Python code that calls it.
  - The `.pyx` file should be well-commented to explain the C-level optimizations.

## Final Output

-   One or more `creative-[feature].md` files in `documentation/memory-bank/creative/`.
-   An update in `tasks.md` marking the creative task as complete and referencing the decision document.
-   Transition to `implement` mode to build the chosen solution.